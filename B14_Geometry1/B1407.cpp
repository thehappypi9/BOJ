// 백준 1004번 문제 (기하 1 - 7 : 어린 왕자)

// 문제:
// 어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다.
// 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다.
// 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다.
// 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.

// 빨간 실선은 어린 왕자가 출발점에서 도착점까지 도달하는데 있어서 필요한 행성계 진입/이탈 횟수를 최소화하는 경로이며, 원은 행성계의 경계를 의미한다.
// 이러한 경로는 여러 개 존재할 수 있지만 적어도 3번의 행성계 진입/이탈이 필요하다는 것을 알 수 있다.
// 위와 같은 은하수 지도, 출발점, 도착점이 주어졌을 때 어린 왕자에게 필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램을 작성해 보자.
// 행성계의 경계가 맞닿거나 서로 교차하는 경우는 없다.
// 또한, 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다.

// 입력:
// 입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다.
// 그 다음 줄부터 각각의 테스트케이스에 대해 첫째 줄에 출발점 (x_1, y_1)과 도착점 (x_2, y_2)이 주어진다.
// 두 번째 줄에는 행성계의 개수 n이 주어지며, 세 번째 줄부터 n줄에 걸쳐 행성계의 중점과 반지름 (c_x, c_y, r)이 주어진다.

// 출력:
// 각 테스트 케이스에 대해 어린 왕자가 거쳐야 할 최소의 행성계 진입/이탈 횟수를 출력한다.

// 제한:
// -1000 ≤ x_1, y_1, x_2, y_2, c_x, c_y ≤ 1000
// 1 ≤ r ≤ 1000
// 1 ≤ n ≤ 50
// 좌표와 반지름은 모두 정수


#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

struct Value {
    double x;
    double y;
    double r;
};

int main() {

    int T; cin >> T;
    for (int t = 0; t < T; t++) {

    // 입력
        Value dep, arr;   // departure, arrival
        cin >> dep.x >> dep.y >> arr.x >> arr.y;   // 출발점과 도착점의 좌표들 입력
        int n; cin >> n;  // 행성계의 개수 입력
        vector<Value> P(n);  // Planetary System
        for (int i = 0; i < n; i++) {
            cin >> P[i].x >> P[i].y >> P[i].r;  // n개의 행성계의 좌표와 반지름 입력
        }


    // 출발점을 둘러싸고 있는 원의 개수: a
    // 도착점을 둘러싸고 있는 원의 개수: b
    // 출발점과 도착점을 동시에 둘러싸고 있는 원의 개수: c
    // 정답: (a-c) + (b-c) = a + b - 2c
        
    // a, b, c 구하기
        double d_dep, d_arr;
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < n; i++) {
            d_dep = sqrt( pow(dep.x - P[i].x, 2) + pow(dep.y - P[i].y, 2) );  // 출발점과 [i]번째로 입력한 행성계의 중심과의 거리
            d_arr = sqrt( pow(arr.x - P[i].x, 2) + pow(arr.y - P[i].y, 2) );  // 도착점과 [i]번째로 입력한 행성계의 중심과의 거리
            if (d_dep < P[i].r && d_arr < P[i].r) { c++; }
            if (d_dep < P[i].r) { a++; }
            if (d_arr < P[i].r) { b++; }
        }
        
    // 출력
        cout << a + b - 2*c << "\n";
    }

    return 0;
}