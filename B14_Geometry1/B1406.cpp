// 백준 1002번 문제 (기하 1 - 6 : 터렛)

// 문제:
// 조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승환의 사진이다.
// 이석원은 조규현과 백승환에게 상대편 마린(류재명)의 위치를 계산하라는 명령을 내렸다.
// 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.
// 조규현의 좌표 (x1, y1)와 백승환의 좌표 (x2, y2)가 주어지고,
// 조규현이 계산한 류재명과의 거리 r1과 백승환이 계산한 류재명과의 거리 r2가 주어졌을 때, 
// 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.

// 입력:
// 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 이루어져 있다.
// 한 줄에 x1, y1, r1, x2, y2, r2가 주어진다.
// x1, y1, x2, y2는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 정수이고, r1, r2는 10,000보다 작거나 같은 자연수이다.

// 출력:
// 각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.


#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

struct Value {
    double x;
    double y;
    double r;
};

int main() {

// 입력
    int T; cin >> T;
    vector<Value> C(T);  // Cho
    vector<Value> B(T);  // Baek
    for (int i = 0; i < T; i++) {
        cin >> C[i].x >> C[i].y >> C[i].r >> B[i].x >> B[i].y >> B[i].r;
    }

// 계산 및 출력
    for (int i = 0; i < T; i++) {
        double d = sqrt( pow((C[i].x-B[i].x),2)+pow((C[i].y-B[i].y),2) );  // 두 원의 중심의 거리
        double r1 = (C[i].r > B[i].r) ? C[i].r : B[i].r;   // 더 큰 반지름
        double r2 = (C[i].r < B[i].r) ? C[i].r : B[i].r;   // 더 작은 반지름
        if ( d == 0 ) {
            if ( r1 == r2 ) { cout << -1 << "\n"; }  // 두 원이 일치한다.
            else { cout << 0 << "\n"; } // r1 < r2   // 두 원의 중심은 일치하지만 반지름이 다름.
        }
        else if ( d < r1 ) {
            if ( d + r2 < r1 ) { cout << 0 << "\n"; } // 작은 원이 중심은 큰 원 내부에 있고, 작은 원은 큰 원의 내부에 있는데 닿지 않는다.
            else if ( d + r2 == r1 ) { cout << 1 << "\n"; } // 작은 원이 중심은 큰 원 내부에 있고, 작은 원은 큰 원의 내부에서 접한다.
            else { cout << 2 << "\n"; } // 작은 원의 중심이 큰 원 내부에 있고, 작은 원은 큰 원과 서로 다른 두 점에서 만난다. 
        }
        else if ( d == r1 ) {
            cout << 2 << "\n"; // 작은 원의 중심이 큰 원 위에 있다.
        }
        else {
            if ( d > r1 + r2 ) { cout << 0 << "\n"; } // 작은 원의 중심이 큰 원 밖에 있고, 두 원은 닿지 않는다.
            else if ( d == r1 + r2 ) { cout << 1 << "\n"; } // 작은 원의 중심이 큰 원 밖에 있고, 두 원은 한 점에서 접한다.
            else { cout << 2 << "\n"; } // 작은 원의 중심이 큰 원 밖에 있고, 두 원은 서로 다른 두 점에서 만난다.
        }
    }

    return 0;
}